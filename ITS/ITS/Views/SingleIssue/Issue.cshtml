@model ITS.Domain.Entities.Issue
@using Microsoft.AspNet.Identity
@using ITS.Domain.Entities
@using ITS.Utils;
@using ITS.Models;

@{
    ViewBag.Title = "Issue";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    label, input { display:block; }
    input.text { margin-bottom:12px; width:95%; padding: .4em; }
    div.comment {
        border:none;
        /*border-color: black;
        border-width: 1px;*/
    }

    div.single-comment {
        border:solid;
        border-color: green;
        border-width: 2px;
    }

    .error {
        color: #FF0000;
    }

</style>

<div class="panel panel-primary">
    <div class="panel-heading">
        <h2>@Model.Title</h2>
    </div>
    <div class="panel-body">
        <h3>@Model.Description</h3>
        <div class="sidecontent">
            <a class="modalorder" href="#">
                Edit details
            </a>
        </div>
    </div>
</div>

<h3>Current status: @Model.Status</h3>

@{
    
    Html.RenderAction("IssuePartial", "SingleIssue", new { issueId = Model.Id, userEmail = User.Identity.GetUserId() });
}

<br />
<h3>Comments</h3>
<div class="Comments">
    <a id="addComment" href="#"> Add Comment </a>
    <br /><br />
    @foreach (var x in Model.Comments.Reverse())
    {
        <div class="panel panel-default">
            <div class="panel-heading">
                <i>Created by @x.CommentChanges.First(y => y.TypeOfChange == "CREATION").UserEmail</i>;
                <i>Modified last time by @x.CommentChanges.OrderByDescending(y => y.TimeOfChange).First().UserEmail</i>
            </div>
            <br />
            <div class="panel-body"> @x.Text </div>
            <span class="comment-edit" style="display:none" id="comment-edit_@(x.Id)">
                @Html.Partial("ModifyComment", new ITS.Models.CommentViewModel()
           {
               Comment = x,
               UserEmail = User.Identity.GetUserName()
           })

            </span>
            <button id="edit-btn-@(x.Id)" class="btn btn-info" onclick="toggle_visibility(@(x.Id))">Edit</button>
        </div>
    }
</div>

<br />

<div class="panel panel-default">
    <div class="panel-heading">

        <h3>Attachments</h3>
    </div>
    <div class="panel-body">

        <div class="attachments">
            <div> Attachments: </div>
            @foreach (var attachment in Model.Attachments)
            {
                <div>
                    @Html.ActionLink(@attachment.Name, "DownloadFile", "SingleIssue", new { currentIssueId = @Model.Id, fileId = @attachment.Id }, null)
                    <a href="@Url.Action("DeleteAttachment", "Attachment", new { attachmentId = attachment.Id })">
                        <img src="@Url.Content("~/Content/Images/delete-icon.png")" style="width:10px;height:10px;" />
                    </a>
                </div>
            }

            @Html.Partial("UploadFile", new ITS.Models.AttachmentViewModel() { Attachment = new Attachment { IssueId = Model.Id } })
        </div>
        </div>
</div>
    @Html.Partial("AddComment", new ITS.Models.CommentViewModel()
{
    Comment =
        new ITS.Domain.Entities.Comment() { IssueId = @Model.Id },
    UserEmail = User.Identity.GetUserName()
})

    <br />

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>Work log</h3>
    </div>
    <div class="panel-body">
        <div class="work-log-container">
            <div id="work-log-summarry">
                A total of @Model.WorkLogs.Where(x => x.IssueId == Model.Id && x.UserId == User.Identity.GetUserId()).Sum(x => TimeUtils.ConvertMillisecondsToHours(x.MillisecondsLogged))
                hours has been logged for this issue
            </div>
            <input type="button" value="Log Work" id="work-log-btn" />
            @Html.Partial("LogWork", new WorkLog() { IssueId = @Model.Id, UserId = User.Identity.GetUserId() })
        </div>
    </div>
</div>

    <br />

<div class="panel panel-default">
    <div class="panel-heading">
        <h3>Issue connections:</h3>
    </div>
    <div class="panel-body">
        <div class="issue-connections" style="display:block">
            @foreach (var x in @Model.IssueConnections)
            {
                <div> @Html.ActionLink(@x.Title, "Issue", "SingleIssue", new { issueId = @x.Id }, null) </div>
            }
        </div>
        @{ Html.RenderAction("AddIssueConnection", new { issueId = Model.Id }); }
    </div>
</div>

@section Scripts
{
        <script type="text/javascript">
            function toggle_visibility(id) {
                var e = document.getElementById('comment-edit_' + id);
                var eBtn = document.getElementById('edit-btn-' + id);
                var cBtn = document.getElementById('cancel-btn-' + id);
                if (e.style.display == 'inline') {
                    e.style.display = 'none';
                    eBtn.style.display = 'block';
                    //cBtn.style.display = 'none';
                }
                else {
                    e.style.display = 'inline';
                    eBtn.style.display = 'none';
                    //cBtn.style.display = 'block';
                }
            }

            $(function () {

                $("#sForm").validate();

                var dial;
                dial = $(".order_bg").dialog({
                    height: 400,
                    width: 350,
                    modal: true,
                    autoOpen: false,
                    buttons: {
                        "Apply": function () {
                            console.log("Submitting");
                            //document.getElementById("sForm").submit();
                            document.getElementById('issue-submit').click();

                        },
                        "Cancel": function () {
                            dial.dialog("close");
                        }
                    }
                });

                var addComm;
                addComm = $("#add-comment").dialog({
                    height: 400,
                    width: 350,
                    modal: true,
                    autoOpen: false,
                    buttons: {
                        "Add": function () {
                            console.log("Submitting");
                            document.getElementById("acForm").submit();
                        },
                        "Cancel": function () {
                            addComm.dialog("close");
                        }
                    }
                });

                var logWork;
                logWork = $("#log-work").dialog({
                    height: 400,
                    width: 350,
                    modal: true,
                    autoOpen: false,
                    buttons: {
                        "Log Work": function () {
                            console.log("Submitting Logged work");
                            document.getElementById("log-work-form").submit();
                        },
                        "Cancel": function () {
                            logWork.dialog("close");
                        }
                    }
                });

                $(".modalorder").button().on("click", function () {
                    dial.dialog("open");
                    console.log("EDIT ISSUE CLICKED");
                });

                $("#addComment").button().on("click", function () {
                    addComm.dialog("open");
                    console.log("ADD COMMENT CLICKED");
                });

                $("#work-log-btn").button().on("click", function () {
                    logWork.dialog("open");
                    console.log("LOG WORK DIALOG");
                });
            });
        </script>
    }
